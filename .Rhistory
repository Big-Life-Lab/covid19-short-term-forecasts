i=1
k=1
f <- (1:length(midAge))+(k-1)*(length(midAge))
a <- get_prev_plot(unit = units[k],Virus = Viruses[i])
unit = units[k]
Virus = Viruses[i]
Status <- d[,paste0('P_',Virus)]
Age <- d$cut_age
if (unit=='Aggregated'){
}else{
f <- which(d$City %in% unit)
Status <- Status[f]
Age <- Age[f]
}
name <- paste0(unit,' - ',Virus)
col.scenarios <- c("#4f81bd")
col.scenarios.transp <- paste(col.scenarios,c("55"),sep="")
# temp <- table(Status, Age)
# aggregate(Status, by=list(Category=Age), FUN=sum)
pos <- aggregate(Status, by=list(Category=Age), FUN=sum)
na <- pos[,1]
pos <- pos[,2]
neg <- aggregate(Status, by=list(Category=Age), FUN=length)[,2] - pos
p_pos <- binconf(pos,pos+neg,method = 'exact')
Nage <- levels(d$cut_age)
if(sum((na) %in% Nage) != length(Nage)) warning('problem with missing ages')
p_pos
Age
Status <- d[,paste0('P_',Virus)]
Age <- d$cut_age
if (unit=='Aggregated'){
}else{
f <- which(d$City %in% unit)
Status <- Status[f]
Age <- Age[f]
post_st <- Post_status[f,]
}
name <- paste0(unit,' - ',Virus)
col.scenarios <- c("#4f81bd")
col.scenarios.transp <- paste(col.scenarios,c("55"),sep="")
pos <- aggregate(Status, by=list(Category=Age), FUN=sum)
na <- pos[,1]
pos <- pos[,2]
neg <- aggregate(Status, by=list(Category=Age), FUN=length)[,2] - pos
neg
pos2 <- aggregate(post_st, by=list(Category=Age), FUN=sum)
pos
neg2 <- aggregate(post_st, by=list(Category=Age), FUN=length)[,2] - pos
neg2 <- aggregate(post_st, by=list(Category=Age), FUN=length)[,2] - pos2
n2
n2<-pos2+neg2
View(neg2)
pos
pos <- aggregate(Status, by=list(Category=Age), FUN=sum)
pos
na
pos+neg
neg <- aggregate(Status, by=list(Category=Age), FUN=length)[,2] - pos
na <- pos[,1]
pos <- pos[,2]
neg <- aggregate(Status, by=list(Category=Age), FUN=length)[,2] - pos
aggregate(Status, by=list(Category=Age), FUN=length)[,2]
pos2 <- aggregate(post_st, by=list(Category=Age), FUN=sum)[,-1]
View(pos2)
pos <- aggregate(Status, by=list(Category=Age), FUN=sum)
pos2 <- aggregate(post_st, by=list(Category=Age), FUN=sum)[,-1]
na <- pos[,1]
pos <- pos[,2]
neg <- aggregate(Status, by=list(Category=Age), FUN=length)[,2] - pos
neg2 <- aggregate(post_st, by=list(Category=Age), FUN=length)[,2] - pos2
n2=pos2+neg
n2=pos2+neg2
View(n2)
p_pos
quantile(pos2/(pos2+neg2),c(.025,.975))
pos2/(pos2+neg2)
apply(pos2/(pos2+neg2),2,quantile,c(.025,.975))
p_pos2 <- cbind(p_pos[,1],apply(pos2/(pos2+neg2),1,quantile,c(.025,.975)))
apply(pos2/(pos2+neg2),1,quantile,c(.025,.975))
p_pos2 <- cbind(p_pos[,1],t(apply(pos2/(pos2+neg2),1,quantile,c(.025,.975))))
p_pos2
col.scenarios <- c("#4f81bd",'#4fbd54')
col.scenarios.transp <- paste(col.scenarios,c("55"),sep="")
Status <- d[,paste0('P_',Virus)]
Age <- d$cut_age
if (unit=='Aggregated'){
}else{
f <- which(d$City %in% unit)
Status <- Status[f]
Age <- Age[f]
post_st <- Post_status[f,]
}
name <- paste0(unit,' - ',Virus)
col.scenarios <- c("#4f81bd",'#4fbd54')
col.scenarios.transp <- paste(col.scenarios,c("55"),sep="")
# temp <- table(Status, Age)
# aggregate(Status, by=list(Category=Age), FUN=sum)
pos <- aggregate(Status, by=list(Category=Age), FUN=sum)
pos2 <- aggregate(post_st, by=list(Category=Age), FUN=sum)[,-1]
na <- pos[,1]
pos <- pos[,2]
neg <- aggregate(Status, by=list(Category=Age), FUN=length)[,2] - pos
neg2 <- aggregate(post_st, by=list(Category=Age), FUN=length)[,2] - pos2
p_pos <- binconf(pos,pos+neg,method = 'exact')
p_pos2 <- cbind(p_pos[,1],t(apply(pos2/(pos2+neg2),1,quantile,c(.025,.975))))
Nage <- levels(d$cut_age)
if(sum((na) %in% Nage) != length(Nage)) warning('problem with missing ages')
plot(midAge,p_pos[,1],type='p',ylim=c(0,1),
col=col.scenarios[1],pch=16,
xlab='',ylab='',
main=name,
xaxt  = 'n',yaxt='n',bty='n')
axis(side = 1, at = midAge,labels = Nage)
axis(side = 2, at = seq(0,1,length.out = 6))
mtext('prevalence',2,3,outer=FALSE,las=0,adj=.5)
mtext("Age", 1, 2.5, outer=FALSE,padj=0,adj=.5)
polygon(c(midAge,rev(midAge)),
c(p_pos[,2],rev(p_pos[,3])),
col = col.scenarios.transp[1],border=NA)
polygon(c(midAge,rev(midAge)),
c(p_pos2[,2],rev(p_pos2[,3])),
col = col.scenarios.transp[2],border=NA)
View(p_pos)
View(p_pos2)
pos
View(p_pos2)
View(pos2)
pos2 <- aggregate(post_st, by=list(Category=Age), FUN=sum)[,-1]
length(Age)
unique(Age)
pos2 <- matrix(NA, 9, 100)
for (i in 1:100){
pos2[i,] <- aggregate(post_st[,i], by=list(Category=Age), FUN=sum)[,-1]
}
aggregate(post_st[,i], by=list(Category=Age), FUN=sum)
aggregate(post_st[,i], by=list(Category=Age), FUN=sum)[,-1]
pos2 <- matrix(NA, 9, 100)
for (i in 1:100){
pos2[i,] <- t(aggregate(post_st[,i], by=list(Category=Age), FUN=sum)[,-1])
}
pos2 <- matrix(NA, 9, 100)
for (i in 1:100){
pos2[,i] <- t(aggregate(post_st[,i], by=list(Category=Age), FUN=sum)[,-1])
}
View(p_pos2)
View(pos2)
(aggregate(post_st[,i], by=list(Category=Age), FUN=sum)
)
temp <- apply(Post_status,2,mean)
temp <- apply(Post_status,1,mean)
View(d2)
View(Post_status)
units <- sort(unique(d$City))
Viruses <- c('DENV','CHIKV', 'ZIKV')
Post_status <- matrix(NA,nrow(d),100)
j=1
temp <- rep(NA,nrow(d))
i=1
temp <- rep(NA,nrow(d))
file <- paste0('Robject/mixture/posterior_probs_',units[i],'_',Viruses[j],'.csv') # careful reading this!!
d2 <- read.csv(file = file,stringsAsFactors = FALSE)
k=1
f <- which(d$Subject %in% d2$Subject[k])
temp[f] <- d2[k,5]
d2[k,5]
mean(as.vector(unlist(d2[k,6:105])))
units <- sort(unique(d$City))
Viruses <- c('DENV','CHIKV', 'ZIKV')
Post_status <- matrix(NA,nrow(d),100)
for (j in 1:3){
temp <- rep(NA,nrow(d))
for (i in 1:length(units)){
file <- paste0('Robject/mixture/posterior_probs_',units[i],'_',Viruses[j],'.csv') # careful reading this!!
d2 <- read.csv(file = file,stringsAsFactors = FALSE)
for (k in 1:nrow(d2)){
f <- which(d$Subject %in% d2$Subject[k])
temp[f] <- d2[k,5]
Post_status[f,] <- as.vector(unlist(d2[k,6:105]))
}
}
d <- cbind(d,temp)
colnames(d)[ncol(d)] <- paste0('P_',Viruses[j])
}
temp <- apply(Post_status,1,mean)
# careful reading this!! modify once final results
units <- sort(unique(d$City))
Viruses <- c('DENV','CHIKV', 'ZIKV')
Post_status <- list() #matrix(NA,nrow(d),100)
for (j in 1:3){
temp <- rep(NA,nrow(d))
Post_status[[j]] <- matrix(NA,nrow(d),100)
for (i in 1:length(units)){
file <- paste0('Robject/mixture/posterior_probs_',units[i],'_',Viruses[j],'.csv') # careful reading this!!
d2 <- read.csv(file = file,stringsAsFactors = FALSE)
for (k in 1:nrow(d2)){
f <- which(d$Subject %in% d2$Subject[k])
temp[f] <- d2[k,5]
Post_status[[j]][f,] <- as.vector(unlist(d2[k,6:105]))
}
}
d <- cbind(d,temp)
colnames(d)[ncol(d)] <- paste0('P_',Viruses[j])
}
layout(matrix(1:(4),2,2,byrow = FALSE))
for (j in 1:3){
for (i in 1:4){
f <- which(d$City %in% units[i])
a <- hist(d[f,paste0('P_',Viruses[j])],breaks = seq(0,1,length.out = 11),plot = FALSE)
if (i==1){
plot(a$mids,a$density/10,type='l',ylim=c(0,1),xlim = c(0,1),
col=i,
xlab='',ylab='',
main=Viruses[j],
xaxt  = 'n',yaxt='n',bty='n')
axis(side = 1, at = seq(0,1,length.out = 3))
axis(side = 2, at = seq(0,1,length.out = 6))
mtext('Frequency',2,3,outer=FALSE,las=0,adj=.5)
mtext("Probability", 1, 2.5, outer=FALSE,padj=0,adj=.5)
}
else{
lines(a$mids,a$density/10,col=i)
}
}
legend('center',units,lwd=1,col=1:4,bty='n')
}
midAge <- seq(floor(min(d$Age)), ceiling(max(d$Age)), by=5)
# midAge <- seq(1, 46, by=5)-1
d$cut_age<-cut(d$Age, midAge)
midAge <- (midAge[2:(length(midAge))]+midAge[1:(length(midAge)-1)])/2
source('Rscript/plot2.R')
D_final <- list()
sampling_data
d_infer <- data.frame(midAge=rep(midAge,length(units)),
city = rep(units,each=length(midAge)))
d$Pi=1
k=1
j=1
f <- (1:length(midAge))+(k-1)*(length(midAge))
k
Status <- d[,paste0('P_',Virus)]
Age <- d$cut_age
if (unit=='Aggregated'){
}else{
f <- which(d$City %in% unit)
Status <- Status[f]
Age <- Age[f]
post_st <- Post_status[[k]][f,]
}
name <- paste0(unit,' - ',Virus)
col.scenarios <- c("#4f81bd",'#4fbd54')
col.scenarios.transp <- paste(col.scenarios,c("55"),sep="")
# temp <- table(Status, Age)
# aggregate(Status, by=list(Category=Age), FUN=sum)
pos <- aggregate(Status, by=list(Category=Age), FUN=sum)
pos2 <- matrix(NA, 9, 100)
for (i in 1:100){
pos2[,i] <- t(aggregate(post_st[,i], by=list(Category=Age), FUN=sum)[,-1])
}
na <- pos[,1]
pos <- pos[,2]
neg <- aggregate(Status, by=list(Category=Age), FUN=length)[,2] - pos
neg2 <- aggregate(post_st, by=list(Category=Age), FUN=length)[,2] - pos2
p_pos <- binconf(pos,pos+neg,method = 'exact')
p_pos2 <- cbind(p_pos[,1],t(apply(pos2/(pos2+neg2),1,quantile,c(.025,.975))))
Nage <- levels(d$cut_age)
if(sum((na) %in% Nage) != length(Nage)) warning('problem with missing ages')
plot(midAge,p_pos[,1],type='p',ylim=c(0,1),
col=col.scenarios[1],pch=16,
xlab='',ylab='',
main=name,
xaxt  = 'n',yaxt='n',bty='n')
axis(side = 1, at = midAge,labels = Nage)
axis(side = 2, at = seq(0,1,length.out = 6))
mtext('prevalence',2,3,outer=FALSE,las=0,adj=.5)
mtext("Age", 1, 2.5, outer=FALSE,padj=0,adj=.5)
polygon(c(midAge,rev(midAge)),
c(p_pos[,2],rev(p_pos[,3])),
col = col.scenarios.transp[1],border=NA)
polygon(c(midAge,rev(midAge)),
c(p_pos2[,2],rev(p_pos2[,3])),
col = col.scenarios.transp[2],border=NA)
library(knitr)
opts_chunk$set(fig.path='figs/', fig.keep='high',
dev=c('png'), fig.width=6, fig.height=4, cache=FALSE,
tidy=FALSE, warning=FALSE, fig.show="asis"
)
# library(EpiEstim)
library(Hmisc)
# library(rmutil)
# library(ggplot2)
# library(rjags)
# library(KernSmooth)
# library(evaluate)
#
# library(gstat)
# library(sp)
# library(maptools)
# # library(RgoogleMaps)
# library(ggmap)
# library(profvis)
rm(list=ls(all.names=TRUE))
load(file = 'Robject/clean_dataset.RData')
# a <-round(d$Age)
# tt <- table(a,d$CHIKV_MIA_CLASS)
# cbind(tt,tt[,2]/rowSums(tt))
# careful reading this!! modify once final results
units <- sort(unique(d$City))
Viruses <- c('DENV','CHIKV', 'ZIKV')
Post_status <- list() #matrix(NA,nrow(d),100)
for (j in 1:3){
temp <- rep(NA,nrow(d))
Post_status[[j]] <- matrix(NA,nrow(d),100)
for (i in 1:length(units)){
file <- paste0('Robject/mixture/posterior_probs_',units[i],'_',Viruses[j],'.csv') # careful reading this!!
d2 <- read.csv(file = file,stringsAsFactors = FALSE)
for (k in 1:nrow(d2)){
f <- which(d$Subject %in% d2$Subject[k])
temp[f] <- d2[k,5]
Post_status[[j]][f,] <- as.vector(unlist(d2[k,6:105]))
}
}
d <- cbind(d,temp)
colnames(d)[ncol(d)] <- paste0('P_',Viruses[j])
}
layout(matrix(1:(4),2,2,byrow = FALSE))
for (j in 1:3){
for (i in 1:4){
f <- which(d$City %in% units[i])
a <- hist(d[f,paste0('P_',Viruses[j])],breaks = seq(0,1,length.out = 11),plot = FALSE)
if (i==1){
plot(a$mids,a$density/10,type='l',ylim=c(0,1),xlim = c(0,1),
col=i,
xlab='',ylab='',
main=Viruses[j],
xaxt  = 'n',yaxt='n',bty='n')
axis(side = 1, at = seq(0,1,length.out = 3))
axis(side = 2, at = seq(0,1,length.out = 6))
mtext('Frequency',2,3,outer=FALSE,las=0,adj=.5)
mtext("Probability", 1, 2.5, outer=FALSE,padj=0,adj=.5)
}
else{
lines(a$mids,a$density/10,col=i)
}
}
legend('center',units,lwd=1,col=1:4,bty='n')
}
midAge <- seq(floor(min(d$Age)), ceiling(max(d$Age)), by=5)
# midAge <- seq(1, 46, by=5)-1
d$cut_age<-cut(d$Age, midAge)
midAge <- (midAge[2:(length(midAge))]+midAge[1:(length(midAge)-1)])/2
source('Rscript/plot2.R')
D_final <- list()
for (sampling_data in 1){
d_infer <- data.frame(midAge=rep(midAge,length(units)),
city = rep(units,each=length(midAge)))
layout(matrix(1:4,1,4,byrow = TRUE))
for (i in 1:length(Viruses)){ #units)){
for (k in 1:length(units)){ #Viruses)){
f <- (1:length(midAge))+(k-1)*(length(midAge))
a <- get_prev_plot(unit = units[k],Virus = Viruses[i])
d_infer[f,paste0(Viruses[i],'pos')] <- a$pos
d_infer[f,paste0(Viruses[i],'n')] <- a$n
}
}
d_infer$alt <- rep('low')
f <- which(d_infer$city %in% units[2])
d_infer$alt[f]<-'high'
D_final[[sampling_data]] <- d_infer
}
getwd()
36*.15
36*.2
36*.25
36*.35
.2*5
.15*5
.01*7
.01*7*52
100*10
75+2*65+3*55
370/6
85+65+85+75*2+65
450/6
75*2+65*2+85+55
420/6
3*65+55*2+75
380/6
65*3+55+2*75
400/6
2*5*100 + 2*700
2400+900+6000
20*10/60
16-11
5*60/10
3*60/10
2*60/10
sum(1:4)
4^3
20/400
library(Rfast)
a=matrix(runif(6),2,3)
a
b=matrix(runif(6),3,2)
setwd("~/GitHub/covid19-short-term-forcasts")
d = readRDS('Team.output/sbkp_Std_results_week_end_2020-03-15.rds')
names(d)
library(drake)
drake::r_make()
drake::r_make()
remotes::install_github("sangeetabhatia03/assessr")
drake::r_make()
drake::loadd()
library(purrr)
x <- split(
ensemble_weekly_qntls,
ensemble_weekly_qntls$si
)
y <- split(
ensemble_weekly_qntls,
ensemble_weekly_qntls$si
)
x <- y[[1]]
View(x)
this_si <- x$si[1]
## Get observed number of deaths calculated earlier.
y <- dplyr::select(
weekly_predictions_qntls,
week_ending,
country,
Observed = observed
)
View(y)
y <- dplyr::distinct(y)
x <- format_weekly_pred(x)
source('R/util.R')
x <- format_weekly_pred(x)
View(x)
x$`Week Ending` <- as.Date(x$`Week Ending`)
y$week_ending <- as.Date(y$week_ending)
x <- dplyr::left_join(
x,
y,
by = c("Country" = "country",
"Week Ending" = "week_ending")
)
x <- dplyr::arrange(x, Country)
View(x)
## Get R_t estimates for this country and this
## Week.
rt <- dplyr::filter(ensemble_model_rt, si == this_si)
rt <- format_last_rt(rt)
rt$model <- as.Date(rt$model)
x <- dplyr::left_join(
x,
rt,
by = c("Week Ending" = "model",
"Country" = "Country")
)
x$Country <- snakecase::to_any_case(
as.character(x$Country),
case = "title"
)
View(x)
y <- split(
ensemble_weekly_qntls,
ensemble_weekly_qntls$si
)
x <- y[[2]]
this_si <- x$si[1]
## Get observed number of deaths calculated earlier.
y <- dplyr::select(
weekly_predictions_qntls,
week_ending,
country,
Observed = observed
)
y <- dplyr::distinct(y)
x <- format_weekly_pred(x)
x$`Week Ending` <- as.Date(x$`Week Ending`)
y$week_ending <- as.Date(y$week_ending)
x <- dplyr::left_join(
x,
y,
by = c("Country" = "country",
"Week Ending" = "week_ending")
)
x <- dplyr::arrange(x, Country)
## Get R_t estimates for this country and this
## Week.
rt <- dplyr::filter(ensemble_model_rt, si == this_si)
rt <- format_last_rt(rt)
rt$model <- as.Date(rt$model)
x <- dplyr::left_join(
x,
rt,
by = c("Week Ending" = "model",
"Country" = "Country")
)
x$Country <- snakecase::to_any_case(
as.character(x$Country),
case = "title"
)
View(x)
drake::r_make()
drake::loadd()
rmarkdown::render('standardised_weekly_report.Rmd')
install.packages("ggpubr")
rmarkdown::render('standardised_weekly_report.Rmd')
install.packages("DT")
rmarkdown::render('standardised_weekly_report.Rmd')
install.packages("ggforce")
rmarkdown::render('standardised_weekly_report.Rmd')
